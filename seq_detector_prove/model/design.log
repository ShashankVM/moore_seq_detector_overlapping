
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite -- YosysHQ Edition [202302081344]     |
 |                                                                            |
 |  Copyright (C) 2012 - 2023 YosysHQ GmbH                                    |
 |                                                                            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.26 (git sha1 7e588664e, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific Jan23_SW_Release, released at Wed Feb  1 05:32:11 2023.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file 'seq_detector.sv'

2. Executing HIERARCHY pass (managing design hierarchy).
Statically elaborating the Verific parse tree.
Elaborating all modules in library 'work'
VERIFIC-INFO [VERI-1018] seq_detector.sv:1: compiling module 'seq_detector'
Running rewriter 'initial-assertions'.
Clearing rewriter list.
VERIFIC-INFO [VERI-1018] seq_detector.sv:1: compiling module 'seq_detector'
VERIFIC-WARNING [VERI-1995] seq_detector.sv:24: unique/priority if/case is not full
Importing module seq_detector.

2.1. Analyzing design hierarchy..
Top module:  \seq_detector

2.2. Analyzing design hierarchy..
Top module:  \seq_detector
Removed 0 unused modules.
Module seq_detector directly or indirectly contains formal properties -> setting "keep" attribute.

3. Executing PREP pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \seq_detector

3.1.2. Analyzing design hierarchy..
Top module:  \seq_detector
Removed 0 unused modules.
Module seq_detector directly or indirectly contains formal properties -> setting "keep" attribute.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module seq_detector.
<suppressed ~37 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module seq_detector.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seq_detector..
Removed 0 unused cells and 82 unused wires.
<suppressed ~5 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module seq_detector...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seq_detector.
<suppressed ~3 debug messages>

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seq_detector'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seq_detector..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seq_detector.
    New ctrl vector for $pmux cell $verific$select_19$seq_detector.sv:24$64: { $verific$n51$3 $verific$n53$5 $verific$n54$6 $auto$opt_reduce.cc:134:opt_pmux$266 $verific$n56$8 }
  Optimizing cells in module \seq_detector.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seq_detector'.
Removed a total of 0 cells.

3.6.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seq_detector..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

3.6.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module seq_detector.

3.6.8. Rerunning OPT passes. (Maybe there is more to do..)

3.6.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \seq_detector..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.6.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \seq_detector.
Performed a total of 0 changes.

3.6.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seq_detector'.
Removed a total of 0 cells.

3.6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seq_detector..

3.6.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module seq_detector.

3.6.14. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port B of cell seq_detector.$verific$equal_13$seq_detector.sv:19$56 ($eq).
Removed top 3 bits (of 5) from port B of cell seq_detector.$verific$equal_14$seq_detector.sv:20$57 ($eq).
Removed top 2 bits (of 5) from port B of cell seq_detector.$verific$equal_15$seq_detector.sv:21$58 ($eq).
Removed top 1 bits (of 5) from port B of cell seq_detector.$verific$equal_16$seq_detector.sv:22$59 ($eq).
Removed top 2 bits (of 5) from wire seq_detector.$verific$n41$48.

3.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seq_detector..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module seq_detector.

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\seq_detector'.
Removed a total of 0 cells.

3.10.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \seq_detector..

3.10.4. Finished fast OPT passes.

3.11. Printing statistics.

=== seq_detector ===

   Number of wires:                 52
   Number of wire bits:             64
   Number of public wires:           6
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 53
     $adff                          13
     $aldff                          2
     $and                            9
     $assert                         2
     $assume                         1
     $cover                          1
     $eq                             6
     $initstate                      1
     $not                            7
     $or                             7
     $pmux                           1
     $reduce_or                      2
     $xor                            1

3.12. Executing CHECK pass (checking for obvious problems).
Checking module seq_detector...
Found and reported 0 problems.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \seq_detector

4.2. Analyzing design hierarchy..
Top module:  \seq_detector
Removed 0 unused modules.
Module seq_detector directly or indirectly contains formal properties -> setting "keep" attribute.

5. Executing jny backend.

6. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: eeb46aef3e, CPU: user 0.05s system 0.04s, MEM: 27.95 MB peak
Yosys 0.26 (git sha1 7e588664e, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 25% 3x hierarchy (0 sec), 23% 6x opt_expr (0 sec), ...
